ğŸ‘‰Brute Approach
  -store element in array and check each element.
  -T.C O(n)+O(n)
  -s.c O(n)

ğŸ‘‰ Optimal Approach
-T.C O(n/2)+O(n)+O(n/2)
-S.C O(1)
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode*prev=NULL;
        while(head!=NULL){
            ListNode*node=head->next;
            head->next=prev;
            prev=head;
            head=node;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
       
       if(head==NULL or head->next==NULL){
           return true;
       }

       ListNode* slow=head;
       ListNode* fast=head;

       while(fast->next!=NULL and fast->next->next!=NULL){
           slow=slow->next;
           fast=fast->next->next;
       }

       slow->next=reverse(slow->next);
       slow=slow->next;

        ListNode* dummy=head;
       while(slow!=NULL){
           if(dummy->val!=slow->val)return false;
           dummy=dummy->next;
           slow=slow->next;
       }
       return true;
    }
};
